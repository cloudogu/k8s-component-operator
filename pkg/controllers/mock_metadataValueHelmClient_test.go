// Code generated by mockery v2.20.0. DO NOT EDIT.

package controllers

import (
	context "context"

	client "github.com/cloudogu/k8s-component-operator/pkg/helm/client"
	chart "helm.sh/helm/v3/pkg/chart"

	mock "github.com/stretchr/testify/mock"

	release "helm.sh/helm/v3/pkg/release"

	v1 "github.com/cloudogu/k8s-component-operator/pkg/api/v1"
)

// mockMetadataValueHelmClient is an autogenerated mock type for the metadataValueHelmClient type
type mockMetadataValueHelmClient struct {
	mock.Mock
}

type mockMetadataValueHelmClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockMetadataValueHelmClient) EXPECT() *mockMetadataValueHelmClient_Expecter {
	return &mockMetadataValueHelmClient_Expecter{mock: &_m.Mock}
}

// GetChart provides a mock function with given fields: ctx, chartSpec
func (_m *mockMetadataValueHelmClient) GetChart(ctx context.Context, chartSpec *client.ChartSpec) (*chart.Chart, error) {
	ret := _m.Called(ctx, chartSpec)

	var r0 *chart.Chart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.ChartSpec) (*chart.Chart, error)); ok {
		return rf(ctx, chartSpec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.ChartSpec) *chart.Chart); ok {
		r0 = rf(ctx, chartSpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chart.Chart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.ChartSpec) error); ok {
		r1 = rf(ctx, chartSpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMetadataValueHelmClient_GetChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChart'
type mockMetadataValueHelmClient_GetChart_Call struct {
	*mock.Call
}

// GetChart is a helper method to define mock.On call
//   - ctx context.Context
//   - chartSpec *client.ChartSpec
func (_e *mockMetadataValueHelmClient_Expecter) GetChart(ctx interface{}, chartSpec interface{}) *mockMetadataValueHelmClient_GetChart_Call {
	return &mockMetadataValueHelmClient_GetChart_Call{Call: _e.mock.On("GetChart", ctx, chartSpec)}
}

func (_c *mockMetadataValueHelmClient_GetChart_Call) Run(run func(ctx context.Context, chartSpec *client.ChartSpec)) *mockMetadataValueHelmClient_GetChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.ChartSpec))
	})
	return _c
}

func (_c *mockMetadataValueHelmClient_GetChart_Call) Return(_a0 *chart.Chart, _a1 error) *mockMetadataValueHelmClient_GetChart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockMetadataValueHelmClient_GetChart_Call) RunAndReturn(run func(context.Context, *client.ChartSpec) (*chart.Chart, error)) *mockMetadataValueHelmClient_GetChart_Call {
	_c.Call.Return(run)
	return _c
}

// GetChartSpecValues provides a mock function with given fields: _a0
func (_m *mockMetadataValueHelmClient) GetChartSpecValues(_a0 *client.ChartSpec) (map[string]interface{}, error) {
	ret := _m.Called(_a0)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.ChartSpec) (map[string]interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.ChartSpec) map[string]interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*client.ChartSpec) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMetadataValueHelmClient_GetChartSpecValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChartSpecValues'
type mockMetadataValueHelmClient_GetChartSpecValues_Call struct {
	*mock.Call
}

// GetChartSpecValues is a helper method to define mock.On call
//   - _a0 *client.ChartSpec
func (_e *mockMetadataValueHelmClient_Expecter) GetChartSpecValues(_a0 interface{}) *mockMetadataValueHelmClient_GetChartSpecValues_Call {
	return &mockMetadataValueHelmClient_GetChartSpecValues_Call{Call: _e.mock.On("GetChartSpecValues", _a0)}
}

func (_c *mockMetadataValueHelmClient_GetChartSpecValues_Call) Run(run func(_a0 *client.ChartSpec)) *mockMetadataValueHelmClient_GetChartSpecValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.ChartSpec))
	})
	return _c
}

func (_c *mockMetadataValueHelmClient_GetChartSpecValues_Call) Return(_a0 map[string]interface{}, _a1 error) *mockMetadataValueHelmClient_GetChartSpecValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockMetadataValueHelmClient_GetChartSpecValues_Call) RunAndReturn(run func(*client.ChartSpec) (map[string]interface{}, error)) *mockMetadataValueHelmClient_GetChartSpecValues_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleaseValues provides a mock function with given fields: name, allValues
func (_m *mockMetadataValueHelmClient) GetReleaseValues(name string, allValues bool) (map[string]interface{}, error) {
	ret := _m.Called(name, allValues)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (map[string]interface{}, error)); ok {
		return rf(name, allValues)
	}
	if rf, ok := ret.Get(0).(func(string, bool) map[string]interface{}); ok {
		r0 = rf(name, allValues)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(name, allValues)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMetadataValueHelmClient_GetReleaseValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseValues'
type mockMetadataValueHelmClient_GetReleaseValues_Call struct {
	*mock.Call
}

// GetReleaseValues is a helper method to define mock.On call
//   - name string
//   - allValues bool
func (_e *mockMetadataValueHelmClient_Expecter) GetReleaseValues(name interface{}, allValues interface{}) *mockMetadataValueHelmClient_GetReleaseValues_Call {
	return &mockMetadataValueHelmClient_GetReleaseValues_Call{Call: _e.mock.On("GetReleaseValues", name, allValues)}
}

func (_c *mockMetadataValueHelmClient_GetReleaseValues_Call) Run(run func(name string, allValues bool)) *mockMetadataValueHelmClient_GetReleaseValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *mockMetadataValueHelmClient_GetReleaseValues_Call) Return(_a0 map[string]interface{}, _a1 error) *mockMetadataValueHelmClient_GetReleaseValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockMetadataValueHelmClient_GetReleaseValues_Call) RunAndReturn(run func(string, bool) (map[string]interface{}, error)) *mockMetadataValueHelmClient_GetReleaseValues_Call {
	_c.Call.Return(run)
	return _c
}

// InstallOrUpgrade provides a mock function with given fields: ctx, _a1
func (_m *mockMetadataValueHelmClient) InstallOrUpgrade(ctx context.Context, _a1 *client.ChartSpec) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.ChartSpec) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetadataValueHelmClient_InstallOrUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallOrUpgrade'
type mockMetadataValueHelmClient_InstallOrUpgrade_Call struct {
	*mock.Call
}

// InstallOrUpgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *client.ChartSpec
func (_e *mockMetadataValueHelmClient_Expecter) InstallOrUpgrade(ctx interface{}, _a1 interface{}) *mockMetadataValueHelmClient_InstallOrUpgrade_Call {
	return &mockMetadataValueHelmClient_InstallOrUpgrade_Call{Call: _e.mock.On("InstallOrUpgrade", ctx, _a1)}
}

func (_c *mockMetadataValueHelmClient_InstallOrUpgrade_Call) Run(run func(ctx context.Context, _a1 *client.ChartSpec)) *mockMetadataValueHelmClient_InstallOrUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.ChartSpec))
	})
	return _c
}

func (_c *mockMetadataValueHelmClient_InstallOrUpgrade_Call) Return(_a0 error) *mockMetadataValueHelmClient_InstallOrUpgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetadataValueHelmClient_InstallOrUpgrade_Call) RunAndReturn(run func(context.Context, *client.ChartSpec) error) *mockMetadataValueHelmClient_InstallOrUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// IsValuesChanged provides a mock function with given fields: ctx, deployedRelease, component
func (_m *mockMetadataValueHelmClient) IsValuesChanged(ctx context.Context, deployedRelease *release.Release, component *v1.Component) (bool, error) {
	ret := _m.Called(ctx, deployedRelease, component)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *release.Release, *v1.Component) (bool, error)); ok {
		return rf(ctx, deployedRelease, component)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *release.Release, *v1.Component) bool); ok {
		r0 = rf(ctx, deployedRelease, component)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *release.Release, *v1.Component) error); ok {
		r1 = rf(ctx, deployedRelease, component)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMetadataValueHelmClient_IsValuesChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValuesChanged'
type mockMetadataValueHelmClient_IsValuesChanged_Call struct {
	*mock.Call
}

// IsValuesChanged is a helper method to define mock.On call
//   - ctx context.Context
//   - deployedRelease *release.Release
//   - component *v1.Component
func (_e *mockMetadataValueHelmClient_Expecter) IsValuesChanged(ctx interface{}, deployedRelease interface{}, component interface{}) *mockMetadataValueHelmClient_IsValuesChanged_Call {
	return &mockMetadataValueHelmClient_IsValuesChanged_Call{Call: _e.mock.On("IsValuesChanged", ctx, deployedRelease, component)}
}

func (_c *mockMetadataValueHelmClient_IsValuesChanged_Call) Run(run func(ctx context.Context, deployedRelease *release.Release, component *v1.Component)) *mockMetadataValueHelmClient_IsValuesChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*release.Release), args[2].(*v1.Component))
	})
	return _c
}

func (_c *mockMetadataValueHelmClient_IsValuesChanged_Call) Return(_a0 bool, _a1 error) *mockMetadataValueHelmClient_IsValuesChanged_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockMetadataValueHelmClient_IsValuesChanged_Call) RunAndReturn(run func(context.Context, *release.Release, *v1.Component) (bool, error)) *mockMetadataValueHelmClient_IsValuesChanged_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeployedReleases provides a mock function with given fields:
func (_m *mockMetadataValueHelmClient) ListDeployedReleases() ([]*release.Release, error) {
	ret := _m.Called()

	var r0 []*release.Release
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*release.Release, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*release.Release); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.Release)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMetadataValueHelmClient_ListDeployedReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeployedReleases'
type mockMetadataValueHelmClient_ListDeployedReleases_Call struct {
	*mock.Call
}

// ListDeployedReleases is a helper method to define mock.On call
func (_e *mockMetadataValueHelmClient_Expecter) ListDeployedReleases() *mockMetadataValueHelmClient_ListDeployedReleases_Call {
	return &mockMetadataValueHelmClient_ListDeployedReleases_Call{Call: _e.mock.On("ListDeployedReleases")}
}

func (_c *mockMetadataValueHelmClient_ListDeployedReleases_Call) Run(run func()) *mockMetadataValueHelmClient_ListDeployedReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockMetadataValueHelmClient_ListDeployedReleases_Call) Return(_a0 []*release.Release, _a1 error) *mockMetadataValueHelmClient_ListDeployedReleases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockMetadataValueHelmClient_ListDeployedReleases_Call) RunAndReturn(run func() ([]*release.Release, error)) *mockMetadataValueHelmClient_ListDeployedReleases_Call {
	_c.Call.Return(run)
	return _c
}

// SatisfiesDependencies provides a mock function with given fields: ctx, _a1
func (_m *mockMetadataValueHelmClient) SatisfiesDependencies(ctx context.Context, _a1 *client.ChartSpec) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.ChartSpec) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetadataValueHelmClient_SatisfiesDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SatisfiesDependencies'
type mockMetadataValueHelmClient_SatisfiesDependencies_Call struct {
	*mock.Call
}

// SatisfiesDependencies is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *client.ChartSpec
func (_e *mockMetadataValueHelmClient_Expecter) SatisfiesDependencies(ctx interface{}, _a1 interface{}) *mockMetadataValueHelmClient_SatisfiesDependencies_Call {
	return &mockMetadataValueHelmClient_SatisfiesDependencies_Call{Call: _e.mock.On("SatisfiesDependencies", ctx, _a1)}
}

func (_c *mockMetadataValueHelmClient_SatisfiesDependencies_Call) Run(run func(ctx context.Context, _a1 *client.ChartSpec)) *mockMetadataValueHelmClient_SatisfiesDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.ChartSpec))
	})
	return _c
}

func (_c *mockMetadataValueHelmClient_SatisfiesDependencies_Call) Return(_a0 error) *mockMetadataValueHelmClient_SatisfiesDependencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetadataValueHelmClient_SatisfiesDependencies_Call) RunAndReturn(run func(context.Context, *client.ChartSpec) error) *mockMetadataValueHelmClient_SatisfiesDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// Uninstall provides a mock function with given fields: releaseName
func (_m *mockMetadataValueHelmClient) Uninstall(releaseName string) error {
	ret := _m.Called(releaseName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(releaseName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetadataValueHelmClient_Uninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uninstall'
type mockMetadataValueHelmClient_Uninstall_Call struct {
	*mock.Call
}

// Uninstall is a helper method to define mock.On call
//   - releaseName string
func (_e *mockMetadataValueHelmClient_Expecter) Uninstall(releaseName interface{}) *mockMetadataValueHelmClient_Uninstall_Call {
	return &mockMetadataValueHelmClient_Uninstall_Call{Call: _e.mock.On("Uninstall", releaseName)}
}

func (_c *mockMetadataValueHelmClient_Uninstall_Call) Run(run func(releaseName string)) *mockMetadataValueHelmClient_Uninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockMetadataValueHelmClient_Uninstall_Call) Return(_a0 error) *mockMetadataValueHelmClient_Uninstall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetadataValueHelmClient_Uninstall_Call) RunAndReturn(run func(string) error) *mockMetadataValueHelmClient_Uninstall_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUserDefinedValues provides a mock function with given fields: ctx, component
func (_m *mockMetadataValueHelmClient) VerifyUserDefinedValues(ctx context.Context, component *v1.Component) error {
	ret := _m.Called(ctx, component)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Component) error); ok {
		r0 = rf(ctx, component)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetadataValueHelmClient_VerifyUserDefinedValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUserDefinedValues'
type mockMetadataValueHelmClient_VerifyUserDefinedValues_Call struct {
	*mock.Call
}

// VerifyUserDefinedValues is a helper method to define mock.On call
//   - ctx context.Context
//   - component *v1.Component
func (_e *mockMetadataValueHelmClient_Expecter) VerifyUserDefinedValues(ctx interface{}, component interface{}) *mockMetadataValueHelmClient_VerifyUserDefinedValues_Call {
	return &mockMetadataValueHelmClient_VerifyUserDefinedValues_Call{Call: _e.mock.On("VerifyUserDefinedValues", ctx, component)}
}

func (_c *mockMetadataValueHelmClient_VerifyUserDefinedValues_Call) Run(run func(ctx context.Context, component *v1.Component)) *mockMetadataValueHelmClient_VerifyUserDefinedValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Component))
	})
	return _c
}

func (_c *mockMetadataValueHelmClient_VerifyUserDefinedValues_Call) Return(_a0 error) *mockMetadataValueHelmClient_VerifyUserDefinedValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetadataValueHelmClient_VerifyUserDefinedValues_Call) RunAndReturn(run func(context.Context, *v1.Component) error) *mockMetadataValueHelmClient_VerifyUserDefinedValues_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockMetadataValueHelmClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockMetadataValueHelmClient creates a new instance of mockMetadataValueHelmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockMetadataValueHelmClient(t mockConstructorTestingTnewMockMetadataValueHelmClient) *mockMetadataValueHelmClient {
	mock := &mockMetadataValueHelmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
