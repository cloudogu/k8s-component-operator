// Code generated by mockery v2.20.0. DO NOT EDIT.

package controllers

import (
	context "context"

	client "github.com/cloudogu/k8s-component-operator/pkg/helm/client"

	mock "github.com/stretchr/testify/mock"

	release "helm.sh/helm/v3/pkg/release"
)

// mockHelmClient is an autogenerated mock type for the helmClient type
type mockHelmClient struct {
	mock.Mock
}

type mockHelmClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockHelmClient) EXPECT() *mockHelmClient_Expecter {
	return &mockHelmClient_Expecter{mock: &_m.Mock}
}

// InstallOrUpgrade provides a mock function with given fields: ctx, chart
func (_m *mockHelmClient) InstallOrUpgrade(ctx context.Context, chart *client.ChartSpec) error {
	ret := _m.Called(ctx, chart)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.ChartSpec) error); ok {
		r0 = rf(ctx, chart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockHelmClient_InstallOrUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallOrUpgrade'
type mockHelmClient_InstallOrUpgrade_Call struct {
	*mock.Call
}

// InstallOrUpgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - chart *client.ChartSpec
func (_e *mockHelmClient_Expecter) InstallOrUpgrade(ctx interface{}, chart interface{}) *mockHelmClient_InstallOrUpgrade_Call {
	return &mockHelmClient_InstallOrUpgrade_Call{Call: _e.mock.On("InstallOrUpgrade", ctx, chart)}
}

func (_c *mockHelmClient_InstallOrUpgrade_Call) Run(run func(ctx context.Context, chart *client.ChartSpec)) *mockHelmClient_InstallOrUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.ChartSpec))
	})
	return _c
}

func (_c *mockHelmClient_InstallOrUpgrade_Call) Return(_a0 error) *mockHelmClient_InstallOrUpgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockHelmClient_InstallOrUpgrade_Call) RunAndReturn(run func(context.Context, *client.ChartSpec) error) *mockHelmClient_InstallOrUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeployedReleases provides a mock function with given fields:
func (_m *mockHelmClient) ListDeployedReleases() ([]*release.Release, error) {
	ret := _m.Called()

	var r0 []*release.Release
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*release.Release, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*release.Release); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.Release)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockHelmClient_ListDeployedReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeployedReleases'
type mockHelmClient_ListDeployedReleases_Call struct {
	*mock.Call
}

// ListDeployedReleases is a helper method to define mock.On call
func (_e *mockHelmClient_Expecter) ListDeployedReleases() *mockHelmClient_ListDeployedReleases_Call {
	return &mockHelmClient_ListDeployedReleases_Call{Call: _e.mock.On("ListDeployedReleases")}
}

func (_c *mockHelmClient_ListDeployedReleases_Call) Run(run func()) *mockHelmClient_ListDeployedReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockHelmClient_ListDeployedReleases_Call) Return(_a0 []*release.Release, _a1 error) *mockHelmClient_ListDeployedReleases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockHelmClient_ListDeployedReleases_Call) RunAndReturn(run func() ([]*release.Release, error)) *mockHelmClient_ListDeployedReleases_Call {
	_c.Call.Return(run)
	return _c
}

// SatisfiesDependencies provides a mock function with given fields: ctx, chart
func (_m *mockHelmClient) SatisfiesDependencies(ctx context.Context, chart *client.ChartSpec) error {
	ret := _m.Called(ctx, chart)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.ChartSpec) error); ok {
		r0 = rf(ctx, chart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockHelmClient_SatisfiesDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SatisfiesDependencies'
type mockHelmClient_SatisfiesDependencies_Call struct {
	*mock.Call
}

// SatisfiesDependencies is a helper method to define mock.On call
//   - ctx context.Context
//   - chart *client.ChartSpec
func (_e *mockHelmClient_Expecter) SatisfiesDependencies(ctx interface{}, chart interface{}) *mockHelmClient_SatisfiesDependencies_Call {
	return &mockHelmClient_SatisfiesDependencies_Call{Call: _e.mock.On("SatisfiesDependencies", ctx, chart)}
}

func (_c *mockHelmClient_SatisfiesDependencies_Call) Run(run func(ctx context.Context, chart *client.ChartSpec)) *mockHelmClient_SatisfiesDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.ChartSpec))
	})
	return _c
}

func (_c *mockHelmClient_SatisfiesDependencies_Call) Return(_a0 error) *mockHelmClient_SatisfiesDependencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockHelmClient_SatisfiesDependencies_Call) RunAndReturn(run func(context.Context, *client.ChartSpec) error) *mockHelmClient_SatisfiesDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// Uninstall provides a mock function with given fields: releaseName
func (_m *mockHelmClient) Uninstall(releaseName string) error {
	ret := _m.Called(releaseName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(releaseName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockHelmClient_Uninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uninstall'
type mockHelmClient_Uninstall_Call struct {
	*mock.Call
}

// Uninstall is a helper method to define mock.On call
//   - releaseName string
func (_e *mockHelmClient_Expecter) Uninstall(releaseName interface{}) *mockHelmClient_Uninstall_Call {
	return &mockHelmClient_Uninstall_Call{Call: _e.mock.On("Uninstall", releaseName)}
}

func (_c *mockHelmClient_Uninstall_Call) Run(run func(releaseName string)) *mockHelmClient_Uninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockHelmClient_Uninstall_Call) Return(_a0 error) *mockHelmClient_Uninstall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockHelmClient_Uninstall_Call) RunAndReturn(run func(string) error) *mockHelmClient_Uninstall_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockHelmClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockHelmClient creates a new instance of mockHelmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockHelmClient(t mockConstructorTestingTnewMockHelmClient) *mockHelmClient {
	mock := &mockHelmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
