// Code generated by mockery v2.53.3. DO NOT EDIT.

package yaml

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockDocumentSplitter is an autogenerated mock type for the DocumentSplitter type
type MockDocumentSplitter struct {
	mock.Mock
}

type MockDocumentSplitter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDocumentSplitter) EXPECT() *MockDocumentSplitter_Expecter {
	return &MockDocumentSplitter_Expecter{mock: &_m.Mock}
}

// Bytes provides a mock function with no fields
func (_m *MockDocumentSplitter) Bytes() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bytes")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockDocumentSplitter_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockDocumentSplitter_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockDocumentSplitter_Expecter) Bytes() *MockDocumentSplitter_Bytes_Call {
	return &MockDocumentSplitter_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockDocumentSplitter_Bytes_Call) Run(run func()) *MockDocumentSplitter_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDocumentSplitter_Bytes_Call) Return(_a0 []byte) *MockDocumentSplitter_Bytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocumentSplitter_Bytes_Call) RunAndReturn(run func() []byte) *MockDocumentSplitter_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with no fields
func (_m *MockDocumentSplitter) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDocumentSplitter_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockDocumentSplitter_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockDocumentSplitter_Expecter) Err() *MockDocumentSplitter_Err_Call {
	return &MockDocumentSplitter_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockDocumentSplitter_Err_Call) Run(run func()) *MockDocumentSplitter_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDocumentSplitter_Err_Call) Return(_a0 error) *MockDocumentSplitter_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocumentSplitter_Err_Call) RunAndReturn(run func() error) *MockDocumentSplitter_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *MockDocumentSplitter) Next() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockDocumentSplitter_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockDocumentSplitter_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockDocumentSplitter_Expecter) Next() *MockDocumentSplitter_Next_Call {
	return &MockDocumentSplitter_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockDocumentSplitter_Next_Call) Run(run func()) *MockDocumentSplitter_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDocumentSplitter_Next_Call) Return(_a0 bool) *MockDocumentSplitter_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocumentSplitter_Next_Call) RunAndReturn(run func() bool) *MockDocumentSplitter_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Object provides a mock function with no fields
func (_m *MockDocumentSplitter) Object() runtime.Object {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Object")
	}

	var r0 runtime.Object
	if rf, ok := ret.Get(0).(func() runtime.Object); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Object)
		}
	}

	return r0
}

// MockDocumentSplitter_Object_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Object'
type MockDocumentSplitter_Object_Call struct {
	*mock.Call
}

// Object is a helper method to define mock.On call
func (_e *MockDocumentSplitter_Expecter) Object() *MockDocumentSplitter_Object_Call {
	return &MockDocumentSplitter_Object_Call{Call: _e.mock.On("Object")}
}

func (_c *MockDocumentSplitter_Object_Call) Run(run func()) *MockDocumentSplitter_Object_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDocumentSplitter_Object_Call) Return(_a0 runtime.Object) *MockDocumentSplitter_Object_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocumentSplitter_Object_Call) RunAndReturn(run func() runtime.Object) *MockDocumentSplitter_Object_Call {
	_c.Call.Return(run)
	return _c
}

// WithReader provides a mock function with given fields: r
func (_m *MockDocumentSplitter) WithReader(r io.Reader) DocumentSplitter {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WithReader")
	}

	var r0 DocumentSplitter
	if rf, ok := ret.Get(0).(func(io.Reader) DocumentSplitter); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DocumentSplitter)
		}
	}

	return r0
}

// MockDocumentSplitter_WithReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithReader'
type MockDocumentSplitter_WithReader_Call struct {
	*mock.Call
}

// WithReader is a helper method to define mock.On call
//   - r io.Reader
func (_e *MockDocumentSplitter_Expecter) WithReader(r interface{}) *MockDocumentSplitter_WithReader_Call {
	return &MockDocumentSplitter_WithReader_Call{Call: _e.mock.On("WithReader", r)}
}

func (_c *MockDocumentSplitter_WithReader_Call) Run(run func(r io.Reader)) *MockDocumentSplitter_WithReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockDocumentSplitter_WithReader_Call) Return(_a0 DocumentSplitter) *MockDocumentSplitter_WithReader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocumentSplitter_WithReader_Call) RunAndReturn(run func(io.Reader) DocumentSplitter) *MockDocumentSplitter_WithReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDocumentSplitter creates a new instance of MockDocumentSplitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDocumentSplitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDocumentSplitter {
	mock := &MockDocumentSplitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
