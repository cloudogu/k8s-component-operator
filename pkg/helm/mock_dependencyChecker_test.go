// Code generated by mockery v2.20.0. DO NOT EDIT.

package helm

import (
	mock "github.com/stretchr/testify/mock"
	chart "helm.sh/helm/v3/pkg/chart"

	release "helm.sh/helm/v3/pkg/release"
)

// mockDependencyChecker is an autogenerated mock type for the dependencyChecker type
type mockDependencyChecker struct {
	mock.Mock
}

type mockDependencyChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDependencyChecker) EXPECT() *mockDependencyChecker_Expecter {
	return &mockDependencyChecker_Expecter{mock: &_m.Mock}
}

// CheckSatisfied provides a mock function with given fields: dependencies, deployedReleases
func (_m *mockDependencyChecker) CheckSatisfied(dependencies []*chart.Dependency, deployedReleases []*release.Release) error {
	ret := _m.Called(dependencies, deployedReleases)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*chart.Dependency, []*release.Release) error); ok {
		r0 = rf(dependencies, deployedReleases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDependencyChecker_CheckSatisfied_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckSatisfied'
type mockDependencyChecker_CheckSatisfied_Call struct {
	*mock.Call
}

// CheckSatisfied is a helper method to define mock.On call
//   - dependencies []*chart.Dependency
//   - deployedReleases []*release.Release
func (_e *mockDependencyChecker_Expecter) CheckSatisfied(dependencies interface{}, deployedReleases interface{}) *mockDependencyChecker_CheckSatisfied_Call {
	return &mockDependencyChecker_CheckSatisfied_Call{Call: _e.mock.On("CheckSatisfied", dependencies, deployedReleases)}
}

func (_c *mockDependencyChecker_CheckSatisfied_Call) Run(run func(dependencies []*chart.Dependency, deployedReleases []*release.Release)) *mockDependencyChecker_CheckSatisfied_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*chart.Dependency), args[1].([]*release.Release))
	})
	return _c
}

func (_c *mockDependencyChecker_CheckSatisfied_Call) Return(_a0 error) *mockDependencyChecker_CheckSatisfied_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDependencyChecker_CheckSatisfied_Call) RunAndReturn(run func([]*chart.Dependency, []*release.Release) error) *mockDependencyChecker_CheckSatisfied_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockDependencyChecker interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDependencyChecker creates a new instance of mockDependencyChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDependencyChecker(t mockConstructorTestingTnewMockDependencyChecker) *mockDependencyChecker {
	mock := &mockDependencyChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
