// Code generated by mockery v2.53.3. DO NOT EDIT.

package client

import (
	mock "github.com/stretchr/testify/mock"
	action "helm.sh/helm/v3/pkg/action"

	release "helm.sh/helm/v3/pkg/release"
)

// mockGetReleaseAction is an autogenerated mock type for the getReleaseAction type
type mockGetReleaseAction struct {
	mock.Mock
}

type mockGetReleaseAction_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGetReleaseAction) EXPECT() *mockGetReleaseAction_Expecter {
	return &mockGetReleaseAction_Expecter{mock: &_m.Mock}
}

// getRelease provides a mock function with given fields: releaseName
func (_m *mockGetReleaseAction) getRelease(releaseName string) (*release.Release, error) {
	ret := _m.Called(releaseName)

	if len(ret) == 0 {
		panic("no return value specified for getRelease")
	}

	var r0 *release.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*release.Release, error)); ok {
		return rf(releaseName)
	}
	if rf, ok := ret.Get(0).(func(string) *release.Release); ok {
		r0 = rf(releaseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(releaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGetReleaseAction_getRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getRelease'
type mockGetReleaseAction_getRelease_Call struct {
	*mock.Call
}

// getRelease is a helper method to define mock.On call
//   - releaseName string
func (_e *mockGetReleaseAction_Expecter) getRelease(releaseName interface{}) *mockGetReleaseAction_getRelease_Call {
	return &mockGetReleaseAction_getRelease_Call{Call: _e.mock.On("getRelease", releaseName)}
}

func (_c *mockGetReleaseAction_getRelease_Call) Run(run func(releaseName string)) *mockGetReleaseAction_getRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockGetReleaseAction_getRelease_Call) Return(_a0 *release.Release, _a1 error) *mockGetReleaseAction_getRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGetReleaseAction_getRelease_Call) RunAndReturn(run func(string) (*release.Release, error)) *mockGetReleaseAction_getRelease_Call {
	_c.Call.Return(run)
	return _c
}

// raw provides a mock function with no fields
func (_m *mockGetReleaseAction) raw() *action.Get {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for raw")
	}

	var r0 *action.Get
	if rf, ok := ret.Get(0).(func() *action.Get); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*action.Get)
		}
	}

	return r0
}

// mockGetReleaseAction_raw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'raw'
type mockGetReleaseAction_raw_Call struct {
	*mock.Call
}

// raw is a helper method to define mock.On call
func (_e *mockGetReleaseAction_Expecter) raw() *mockGetReleaseAction_raw_Call {
	return &mockGetReleaseAction_raw_Call{Call: _e.mock.On("raw")}
}

func (_c *mockGetReleaseAction_raw_Call) Run(run func()) *mockGetReleaseAction_raw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockGetReleaseAction_raw_Call) Return(_a0 *action.Get) *mockGetReleaseAction_raw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGetReleaseAction_raw_Call) RunAndReturn(run func() *action.Get) *mockGetReleaseAction_raw_Call {
	_c.Call.Return(run)
	return _c
}

// newMockGetReleaseAction creates a new instance of mockGetReleaseAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGetReleaseAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockGetReleaseAction {
	mock := &mockGetReleaseAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
