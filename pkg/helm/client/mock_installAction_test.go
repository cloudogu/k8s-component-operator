// Code generated by mockery v2.53.3. DO NOT EDIT.

package client

import (
	action "helm.sh/helm/v3/pkg/action"
	chart "helm.sh/helm/v3/pkg/chart"

	context "context"

	mock "github.com/stretchr/testify/mock"

	release "helm.sh/helm/v3/pkg/release"
)

// mockInstallAction is an autogenerated mock type for the installAction type
type mockInstallAction struct {
	mock.Mock
}

type mockInstallAction_Expecter struct {
	mock *mock.Mock
}

func (_m *mockInstallAction) EXPECT() *mockInstallAction_Expecter {
	return &mockInstallAction_Expecter{mock: &_m.Mock}
}

// install provides a mock function with given fields: ctx, _a1, values
func (_m *mockInstallAction) install(ctx context.Context, _a1 *chart.Chart, values map[string]interface{}) (*release.Release, error) {
	ret := _m.Called(ctx, _a1, values)

	if len(ret) == 0 {
		panic("no return value specified for install")
	}

	var r0 *release.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chart.Chart, map[string]interface{}) (*release.Release, error)); ok {
		return rf(ctx, _a1, values)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chart.Chart, map[string]interface{}) *release.Release); ok {
		r0 = rf(ctx, _a1, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chart.Chart, map[string]interface{}) error); ok {
		r1 = rf(ctx, _a1, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockInstallAction_install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'install'
type mockInstallAction_install_Call struct {
	*mock.Call
}

// install is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *chart.Chart
//   - values map[string]interface{}
func (_e *mockInstallAction_Expecter) install(ctx interface{}, _a1 interface{}, values interface{}) *mockInstallAction_install_Call {
	return &mockInstallAction_install_Call{Call: _e.mock.On("install", ctx, _a1, values)}
}

func (_c *mockInstallAction_install_Call) Run(run func(ctx context.Context, _a1 *chart.Chart, values map[string]interface{})) *mockInstallAction_install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*chart.Chart), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *mockInstallAction_install_Call) Return(_a0 *release.Release, _a1 error) *mockInstallAction_install_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockInstallAction_install_Call) RunAndReturn(run func(context.Context, *chart.Chart, map[string]interface{}) (*release.Release, error)) *mockInstallAction_install_Call {
	_c.Call.Return(run)
	return _c
}

// raw provides a mock function with no fields
func (_m *mockInstallAction) raw() *action.Install {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for raw")
	}

	var r0 *action.Install
	if rf, ok := ret.Get(0).(func() *action.Install); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*action.Install)
		}
	}

	return r0
}

// mockInstallAction_raw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'raw'
type mockInstallAction_raw_Call struct {
	*mock.Call
}

// raw is a helper method to define mock.On call
func (_e *mockInstallAction_Expecter) raw() *mockInstallAction_raw_Call {
	return &mockInstallAction_raw_Call{Call: _e.mock.On("raw")}
}

func (_c *mockInstallAction_raw_Call) Run(run func()) *mockInstallAction_raw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockInstallAction_raw_Call) Return(_a0 *action.Install) *mockInstallAction_raw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockInstallAction_raw_Call) RunAndReturn(run func() *action.Install) *mockInstallAction_raw_Call {
	_c.Call.Return(run)
	return _c
}

// newMockInstallAction creates a new instance of mockInstallAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockInstallAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockInstallAction {
	mock := &mockInstallAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
