// Code generated by mockery v2.20.0. DO NOT EDIT.

package client

import (
	mock "github.com/stretchr/testify/mock"
	action "helm.sh/helm/v3/pkg/action"

	release "helm.sh/helm/v3/pkg/release"
)

// mockListReleasesAction is an autogenerated mock type for the listReleasesAction type
type mockListReleasesAction struct {
	mock.Mock
}

type mockListReleasesAction_Expecter struct {
	mock *mock.Mock
}

func (_m *mockListReleasesAction) EXPECT() *mockListReleasesAction_Expecter {
	return &mockListReleasesAction_Expecter{mock: &_m.Mock}
}

// listReleases provides a mock function with given fields:
func (_m *mockListReleasesAction) listReleases() ([]*release.Release, error) {
	ret := _m.Called()

	var r0 []*release.Release
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*release.Release, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*release.Release); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.Release)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockListReleasesAction_listReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'listReleases'
type mockListReleasesAction_listReleases_Call struct {
	*mock.Call
}

// listReleases is a helper method to define mock.On call
func (_e *mockListReleasesAction_Expecter) listReleases() *mockListReleasesAction_listReleases_Call {
	return &mockListReleasesAction_listReleases_Call{Call: _e.mock.On("listReleases")}
}

func (_c *mockListReleasesAction_listReleases_Call) Run(run func()) *mockListReleasesAction_listReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockListReleasesAction_listReleases_Call) Return(_a0 []*release.Release, _a1 error) *mockListReleasesAction_listReleases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockListReleasesAction_listReleases_Call) RunAndReturn(run func() ([]*release.Release, error)) *mockListReleasesAction_listReleases_Call {
	_c.Call.Return(run)
	return _c
}

// raw provides a mock function with given fields:
func (_m *mockListReleasesAction) raw() *action.List {
	ret := _m.Called()

	var r0 *action.List
	if rf, ok := ret.Get(0).(func() *action.List); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*action.List)
		}
	}

	return r0
}

// mockListReleasesAction_raw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'raw'
type mockListReleasesAction_raw_Call struct {
	*mock.Call
}

// raw is a helper method to define mock.On call
func (_e *mockListReleasesAction_Expecter) raw() *mockListReleasesAction_raw_Call {
	return &mockListReleasesAction_raw_Call{Call: _e.mock.On("raw")}
}

func (_c *mockListReleasesAction_raw_Call) Run(run func()) *mockListReleasesAction_raw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockListReleasesAction_raw_Call) Return(_a0 *action.List) *mockListReleasesAction_raw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockListReleasesAction_raw_Call) RunAndReturn(run func() *action.List) *mockListReleasesAction_raw_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockListReleasesAction interface {
	mock.TestingT
	Cleanup(func())
}

// newMockListReleasesAction creates a new instance of mockListReleasesAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockListReleasesAction(t mockConstructorTestingTnewMockListReleasesAction) *mockListReleasesAction {
	mock := &mockListReleasesAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
