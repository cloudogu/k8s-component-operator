// Code generated by mockery v2.53.3. DO NOT EDIT.

package client

import (
	mock "github.com/stretchr/testify/mock"
	cli "helm.sh/helm/v3/pkg/cli"
)

// mockLocateChartAction is an autogenerated mock type for the locateChartAction type
type mockLocateChartAction struct {
	mock.Mock
}

type mockLocateChartAction_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLocateChartAction) EXPECT() *mockLocateChartAction_Expecter {
	return &mockLocateChartAction_Expecter{mock: &_m.Mock}
}

// locateChart provides a mock function with given fields: name, version, settings
func (_m *mockLocateChartAction) locateChart(name string, version string, settings *cli.EnvSettings) (string, error) {
	ret := _m.Called(name, version, settings)

	if len(ret) == 0 {
		panic("no return value specified for locateChart")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *cli.EnvSettings) (string, error)); ok {
		return rf(name, version, settings)
	}
	if rf, ok := ret.Get(0).(func(string, string, *cli.EnvSettings) string); ok {
		r0 = rf(name, version, settings)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, *cli.EnvSettings) error); ok {
		r1 = rf(name, version, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockLocateChartAction_locateChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'locateChart'
type mockLocateChartAction_locateChart_Call struct {
	*mock.Call
}

// locateChart is a helper method to define mock.On call
//   - name string
//   - version string
//   - settings *cli.EnvSettings
func (_e *mockLocateChartAction_Expecter) locateChart(name interface{}, version interface{}, settings interface{}) *mockLocateChartAction_locateChart_Call {
	return &mockLocateChartAction_locateChart_Call{Call: _e.mock.On("locateChart", name, version, settings)}
}

func (_c *mockLocateChartAction_locateChart_Call) Run(run func(name string, version string, settings *cli.EnvSettings)) *mockLocateChartAction_locateChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*cli.EnvSettings))
	})
	return _c
}

func (_c *mockLocateChartAction_locateChart_Call) Return(chartPath string, err error) *mockLocateChartAction_locateChart_Call {
	_c.Call.Return(chartPath, err)
	return _c
}

func (_c *mockLocateChartAction_locateChart_Call) RunAndReturn(run func(string, string, *cli.EnvSettings) (string, error)) *mockLocateChartAction_locateChart_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLocateChartAction creates a new instance of mockLocateChartAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLocateChartAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLocateChartAction {
	mock := &mockLocateChartAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
