// Code generated by mockery v2.20.0. DO NOT EDIT.

package client

import (
	mock "github.com/stretchr/testify/mock"
	action "helm.sh/helm/v3/pkg/action"
)

// mockGetReleaseValuesAction is an autogenerated mock type for the getReleaseValuesAction type
type mockGetReleaseValuesAction struct {
	mock.Mock
}

type mockGetReleaseValuesAction_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGetReleaseValuesAction) EXPECT() *mockGetReleaseValuesAction_Expecter {
	return &mockGetReleaseValuesAction_Expecter{mock: &_m.Mock}
}

// getReleaseValues provides a mock function with given fields: releaseName
func (_m *mockGetReleaseValuesAction) getReleaseValues(releaseName string) (map[string]interface{}, error) {
	ret := _m.Called(releaseName)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(releaseName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(releaseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(releaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGetReleaseValuesAction_getReleaseValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getReleaseValues'
type mockGetReleaseValuesAction_getReleaseValues_Call struct {
	*mock.Call
}

// getReleaseValues is a helper method to define mock.On call
//   - releaseName string
func (_e *mockGetReleaseValuesAction_Expecter) getReleaseValues(releaseName interface{}) *mockGetReleaseValuesAction_getReleaseValues_Call {
	return &mockGetReleaseValuesAction_getReleaseValues_Call{Call: _e.mock.On("getReleaseValues", releaseName)}
}

func (_c *mockGetReleaseValuesAction_getReleaseValues_Call) Run(run func(releaseName string)) *mockGetReleaseValuesAction_getReleaseValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockGetReleaseValuesAction_getReleaseValues_Call) Return(_a0 map[string]interface{}, _a1 error) *mockGetReleaseValuesAction_getReleaseValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGetReleaseValuesAction_getReleaseValues_Call) RunAndReturn(run func(string) (map[string]interface{}, error)) *mockGetReleaseValuesAction_getReleaseValues_Call {
	_c.Call.Return(run)
	return _c
}

// raw provides a mock function with given fields:
func (_m *mockGetReleaseValuesAction) raw() *action.GetValues {
	ret := _m.Called()

	var r0 *action.GetValues
	if rf, ok := ret.Get(0).(func() *action.GetValues); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*action.GetValues)
		}
	}

	return r0
}

// mockGetReleaseValuesAction_raw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'raw'
type mockGetReleaseValuesAction_raw_Call struct {
	*mock.Call
}

// raw is a helper method to define mock.On call
func (_e *mockGetReleaseValuesAction_Expecter) raw() *mockGetReleaseValuesAction_raw_Call {
	return &mockGetReleaseValuesAction_raw_Call{Call: _e.mock.On("raw")}
}

func (_c *mockGetReleaseValuesAction_raw_Call) Run(run func()) *mockGetReleaseValuesAction_raw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockGetReleaseValuesAction_raw_Call) Return(_a0 *action.GetValues) *mockGetReleaseValuesAction_raw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGetReleaseValuesAction_raw_Call) RunAndReturn(run func() *action.GetValues) *mockGetReleaseValuesAction_raw_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockGetReleaseValuesAction interface {
	mock.TestingT
	Cleanup(func())
}

// newMockGetReleaseValuesAction creates a new instance of mockGetReleaseValuesAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockGetReleaseValuesAction(t mockConstructorTestingTnewMockGetReleaseValuesAction) *mockGetReleaseValuesAction {
	mock := &mockGetReleaseValuesAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
