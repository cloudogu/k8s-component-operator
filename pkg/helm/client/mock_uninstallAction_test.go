// Code generated by mockery v2.53.3. DO NOT EDIT.

package client

import (
	mock "github.com/stretchr/testify/mock"
	action "helm.sh/helm/v3/pkg/action"

	release "helm.sh/helm/v3/pkg/release"
)

// mockUninstallAction is an autogenerated mock type for the uninstallAction type
type mockUninstallAction struct {
	mock.Mock
}

type mockUninstallAction_Expecter struct {
	mock *mock.Mock
}

func (_m *mockUninstallAction) EXPECT() *mockUninstallAction_Expecter {
	return &mockUninstallAction_Expecter{mock: &_m.Mock}
}

// raw provides a mock function with no fields
func (_m *mockUninstallAction) raw() *action.Uninstall {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for raw")
	}

	var r0 *action.Uninstall
	if rf, ok := ret.Get(0).(func() *action.Uninstall); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*action.Uninstall)
		}
	}

	return r0
}

// mockUninstallAction_raw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'raw'
type mockUninstallAction_raw_Call struct {
	*mock.Call
}

// raw is a helper method to define mock.On call
func (_e *mockUninstallAction_Expecter) raw() *mockUninstallAction_raw_Call {
	return &mockUninstallAction_raw_Call{Call: _e.mock.On("raw")}
}

func (_c *mockUninstallAction_raw_Call) Run(run func()) *mockUninstallAction_raw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockUninstallAction_raw_Call) Return(_a0 *action.Uninstall) *mockUninstallAction_raw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockUninstallAction_raw_Call) RunAndReturn(run func() *action.Uninstall) *mockUninstallAction_raw_Call {
	_c.Call.Return(run)
	return _c
}

// uninstall provides a mock function with given fields: releaseName
func (_m *mockUninstallAction) uninstall(releaseName string) (*release.UninstallReleaseResponse, error) {
	ret := _m.Called(releaseName)

	if len(ret) == 0 {
		panic("no return value specified for uninstall")
	}

	var r0 *release.UninstallReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*release.UninstallReleaseResponse, error)); ok {
		return rf(releaseName)
	}
	if rf, ok := ret.Get(0).(func(string) *release.UninstallReleaseResponse); ok {
		r0 = rf(releaseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.UninstallReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(releaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockUninstallAction_uninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'uninstall'
type mockUninstallAction_uninstall_Call struct {
	*mock.Call
}

// uninstall is a helper method to define mock.On call
//   - releaseName string
func (_e *mockUninstallAction_Expecter) uninstall(releaseName interface{}) *mockUninstallAction_uninstall_Call {
	return &mockUninstallAction_uninstall_Call{Call: _e.mock.On("uninstall", releaseName)}
}

func (_c *mockUninstallAction_uninstall_Call) Run(run func(releaseName string)) *mockUninstallAction_uninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockUninstallAction_uninstall_Call) Return(_a0 *release.UninstallReleaseResponse, _a1 error) *mockUninstallAction_uninstall_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockUninstallAction_uninstall_Call) RunAndReturn(run func(string) (*release.UninstallReleaseResponse, error)) *mockUninstallAction_uninstall_Call {
	_c.Call.Return(run)
	return _c
}

// newMockUninstallAction creates a new instance of mockUninstallAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockUninstallAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockUninstallAction {
	mock := &mockUninstallAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
