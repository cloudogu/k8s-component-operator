// Code generated by mockery v2.42.1. DO NOT EDIT.

package client

import mock "github.com/stretchr/testify/mock"

// mockActionProvider is an autogenerated mock type for the actionProvider type
type mockActionProvider struct {
	mock.Mock
}

type mockActionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockActionProvider) EXPECT() *mockActionProvider_Expecter {
	return &mockActionProvider_Expecter{mock: &_m.Mock}
}

// newGetRelease provides a mock function with given fields:
func (_m *mockActionProvider) newGetRelease() getReleaseAction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for newGetRelease")
	}

	var r0 getReleaseAction
	if rf, ok := ret.Get(0).(func() getReleaseAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(getReleaseAction)
		}
	}

	return r0
}

// mockActionProvider_newGetRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newGetRelease'
type mockActionProvider_newGetRelease_Call struct {
	*mock.Call
}

// newGetRelease is a helper method to define mock.On call
func (_e *mockActionProvider_Expecter) newGetRelease() *mockActionProvider_newGetRelease_Call {
	return &mockActionProvider_newGetRelease_Call{Call: _e.mock.On("newGetRelease")}
}

func (_c *mockActionProvider_newGetRelease_Call) Run(run func()) *mockActionProvider_newGetRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockActionProvider_newGetRelease_Call) Return(_a0 getReleaseAction) *mockActionProvider_newGetRelease_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockActionProvider_newGetRelease_Call) RunAndReturn(run func() getReleaseAction) *mockActionProvider_newGetRelease_Call {
	_c.Call.Return(run)
	return _c
}

// newGetReleaseValues provides a mock function with given fields:
func (_m *mockActionProvider) newGetReleaseValues() getReleaseValuesAction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for newGetReleaseValues")
	}

	var r0 getReleaseValuesAction
	if rf, ok := ret.Get(0).(func() getReleaseValuesAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(getReleaseValuesAction)
		}
	}

	return r0
}

// mockActionProvider_newGetReleaseValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newGetReleaseValues'
type mockActionProvider_newGetReleaseValues_Call struct {
	*mock.Call
}

// newGetReleaseValues is a helper method to define mock.On call
func (_e *mockActionProvider_Expecter) newGetReleaseValues() *mockActionProvider_newGetReleaseValues_Call {
	return &mockActionProvider_newGetReleaseValues_Call{Call: _e.mock.On("newGetReleaseValues")}
}

func (_c *mockActionProvider_newGetReleaseValues_Call) Run(run func()) *mockActionProvider_newGetReleaseValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockActionProvider_newGetReleaseValues_Call) Return(_a0 getReleaseValuesAction) *mockActionProvider_newGetReleaseValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockActionProvider_newGetReleaseValues_Call) RunAndReturn(run func() getReleaseValuesAction) *mockActionProvider_newGetReleaseValues_Call {
	_c.Call.Return(run)
	return _c
}

// newInstall provides a mock function with given fields:
func (_m *mockActionProvider) newInstall() installAction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for newInstall")
	}

	var r0 installAction
	if rf, ok := ret.Get(0).(func() installAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(installAction)
		}
	}

	return r0
}

// mockActionProvider_newInstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newInstall'
type mockActionProvider_newInstall_Call struct {
	*mock.Call
}

// newInstall is a helper method to define mock.On call
func (_e *mockActionProvider_Expecter) newInstall() *mockActionProvider_newInstall_Call {
	return &mockActionProvider_newInstall_Call{Call: _e.mock.On("newInstall")}
}

func (_c *mockActionProvider_newInstall_Call) Run(run func()) *mockActionProvider_newInstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockActionProvider_newInstall_Call) Return(_a0 installAction) *mockActionProvider_newInstall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockActionProvider_newInstall_Call) RunAndReturn(run func() installAction) *mockActionProvider_newInstall_Call {
	_c.Call.Return(run)
	return _c
}

// newListReleases provides a mock function with given fields:
func (_m *mockActionProvider) newListReleases() listReleasesAction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for newListReleases")
	}

	var r0 listReleasesAction
	if rf, ok := ret.Get(0).(func() listReleasesAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listReleasesAction)
		}
	}

	return r0
}

// mockActionProvider_newListReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newListReleases'
type mockActionProvider_newListReleases_Call struct {
	*mock.Call
}

// newListReleases is a helper method to define mock.On call
func (_e *mockActionProvider_Expecter) newListReleases() *mockActionProvider_newListReleases_Call {
	return &mockActionProvider_newListReleases_Call{Call: _e.mock.On("newListReleases")}
}

func (_c *mockActionProvider_newListReleases_Call) Run(run func()) *mockActionProvider_newListReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockActionProvider_newListReleases_Call) Return(_a0 listReleasesAction) *mockActionProvider_newListReleases_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockActionProvider_newListReleases_Call) RunAndReturn(run func() listReleasesAction) *mockActionProvider_newListReleases_Call {
	_c.Call.Return(run)
	return _c
}

// newLocateChart provides a mock function with given fields:
func (_m *mockActionProvider) newLocateChart() locateChartAction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for newLocateChart")
	}

	var r0 locateChartAction
	if rf, ok := ret.Get(0).(func() locateChartAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(locateChartAction)
		}
	}

	return r0
}

// mockActionProvider_newLocateChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newLocateChart'
type mockActionProvider_newLocateChart_Call struct {
	*mock.Call
}

// newLocateChart is a helper method to define mock.On call
func (_e *mockActionProvider_Expecter) newLocateChart() *mockActionProvider_newLocateChart_Call {
	return &mockActionProvider_newLocateChart_Call{Call: _e.mock.On("newLocateChart")}
}

func (_c *mockActionProvider_newLocateChart_Call) Run(run func()) *mockActionProvider_newLocateChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockActionProvider_newLocateChart_Call) Return(_a0 locateChartAction) *mockActionProvider_newLocateChart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockActionProvider_newLocateChart_Call) RunAndReturn(run func() locateChartAction) *mockActionProvider_newLocateChart_Call {
	_c.Call.Return(run)
	return _c
}

// newRollbackRelease provides a mock function with given fields:
func (_m *mockActionProvider) newRollbackRelease() rollbackReleaseAction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for newRollbackRelease")
	}

	var r0 rollbackReleaseAction
	if rf, ok := ret.Get(0).(func() rollbackReleaseAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rollbackReleaseAction)
		}
	}

	return r0
}

// mockActionProvider_newRollbackRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newRollbackRelease'
type mockActionProvider_newRollbackRelease_Call struct {
	*mock.Call
}

// newRollbackRelease is a helper method to define mock.On call
func (_e *mockActionProvider_Expecter) newRollbackRelease() *mockActionProvider_newRollbackRelease_Call {
	return &mockActionProvider_newRollbackRelease_Call{Call: _e.mock.On("newRollbackRelease")}
}

func (_c *mockActionProvider_newRollbackRelease_Call) Run(run func()) *mockActionProvider_newRollbackRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockActionProvider_newRollbackRelease_Call) Return(_a0 rollbackReleaseAction) *mockActionProvider_newRollbackRelease_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockActionProvider_newRollbackRelease_Call) RunAndReturn(run func() rollbackReleaseAction) *mockActionProvider_newRollbackRelease_Call {
	_c.Call.Return(run)
	return _c
}

// newUninstall provides a mock function with given fields:
func (_m *mockActionProvider) newUninstall() uninstallAction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for newUninstall")
	}

	var r0 uninstallAction
	if rf, ok := ret.Get(0).(func() uninstallAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uninstallAction)
		}
	}

	return r0
}

// mockActionProvider_newUninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newUninstall'
type mockActionProvider_newUninstall_Call struct {
	*mock.Call
}

// newUninstall is a helper method to define mock.On call
func (_e *mockActionProvider_Expecter) newUninstall() *mockActionProvider_newUninstall_Call {
	return &mockActionProvider_newUninstall_Call{Call: _e.mock.On("newUninstall")}
}

func (_c *mockActionProvider_newUninstall_Call) Run(run func()) *mockActionProvider_newUninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockActionProvider_newUninstall_Call) Return(_a0 uninstallAction) *mockActionProvider_newUninstall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockActionProvider_newUninstall_Call) RunAndReturn(run func() uninstallAction) *mockActionProvider_newUninstall_Call {
	_c.Call.Return(run)
	return _c
}

// newUpgrade provides a mock function with given fields:
func (_m *mockActionProvider) newUpgrade() upgradeAction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for newUpgrade")
	}

	var r0 upgradeAction
	if rf, ok := ret.Get(0).(func() upgradeAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(upgradeAction)
		}
	}

	return r0
}

// mockActionProvider_newUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newUpgrade'
type mockActionProvider_newUpgrade_Call struct {
	*mock.Call
}

// newUpgrade is a helper method to define mock.On call
func (_e *mockActionProvider_Expecter) newUpgrade() *mockActionProvider_newUpgrade_Call {
	return &mockActionProvider_newUpgrade_Call{Call: _e.mock.On("newUpgrade")}
}

func (_c *mockActionProvider_newUpgrade_Call) Run(run func()) *mockActionProvider_newUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockActionProvider_newUpgrade_Call) Return(_a0 upgradeAction) *mockActionProvider_newUpgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockActionProvider_newUpgrade_Call) RunAndReturn(run func() upgradeAction) *mockActionProvider_newUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// newMockActionProvider creates a new instance of mockActionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockActionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockActionProvider {
	mock := &mockActionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
