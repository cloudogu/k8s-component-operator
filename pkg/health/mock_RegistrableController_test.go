// Code generated by mockery v2.42.1. DO NOT EDIT.

package health

import (
	mock "github.com/stretchr/testify/mock"
	manager "sigs.k8s.io/controller-runtime/pkg/manager"
)

// MockRegistrableController is an autogenerated mock type for the RegistrableController type
type MockRegistrableController struct {
	mock.Mock
}

type MockRegistrableController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistrableController) EXPECT() *MockRegistrableController_Expecter {
	return &MockRegistrableController_Expecter{mock: &_m.Mock}
}

// SetupWithManager provides a mock function with given fields: mgr
func (_m *MockRegistrableController) SetupWithManager(mgr manager.Manager) error {
	ret := _m.Called(mgr)

	if len(ret) == 0 {
		panic("no return value specified for SetupWithManager")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(manager.Manager) error); ok {
		r0 = rf(mgr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistrableController_SetupWithManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupWithManager'
type MockRegistrableController_SetupWithManager_Call struct {
	*mock.Call
}

// SetupWithManager is a helper method to define mock.On call
//   - mgr manager.Manager
func (_e *MockRegistrableController_Expecter) SetupWithManager(mgr interface{}) *MockRegistrableController_SetupWithManager_Call {
	return &MockRegistrableController_SetupWithManager_Call{Call: _e.mock.On("SetupWithManager", mgr)}
}

func (_c *MockRegistrableController_SetupWithManager_Call) Run(run func(mgr manager.Manager)) *MockRegistrableController_SetupWithManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(manager.Manager))
	})
	return _c
}

func (_c *MockRegistrableController_SetupWithManager_Call) Return(_a0 error) *MockRegistrableController_SetupWithManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistrableController_SetupWithManager_Call) RunAndReturn(run func(manager.Manager) error) *MockRegistrableController_SetupWithManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegistrableController creates a new instance of MockRegistrableController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistrableController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistrableController {
	mock := &MockRegistrableController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
