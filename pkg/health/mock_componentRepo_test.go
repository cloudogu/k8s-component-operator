// Code generated by mockery v2.20.0. DO NOT EDIT.

package health

import (
	context "context"

	v1 "github.com/cloudogu/k8s-component-operator/pkg/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// mockComponentRepo is an autogenerated mock type for the componentRepo type
type mockComponentRepo struct {
	mock.Mock
}

type mockComponentRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *mockComponentRepo) EXPECT() *mockComponentRepo_Expecter {
	return &mockComponentRepo_Expecter{mock: &_m.Mock}
}

// get provides a mock function with given fields: ctx, name
func (_m *mockComponentRepo) get(ctx context.Context, name string) (*v1.Component, error) {
	ret := _m.Called(ctx, name)

	var r0 *v1.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.Component, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.Component); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Component)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockComponentRepo_get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'get'
type mockComponentRepo_get_Call struct {
	*mock.Call
}

// get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *mockComponentRepo_Expecter) get(ctx interface{}, name interface{}) *mockComponentRepo_get_Call {
	return &mockComponentRepo_get_Call{Call: _e.mock.On("get", ctx, name)}
}

func (_c *mockComponentRepo_get_Call) Run(run func(ctx context.Context, name string)) *mockComponentRepo_get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockComponentRepo_get_Call) Return(_a0 *v1.Component, _a1 error) *mockComponentRepo_get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockComponentRepo_get_Call) RunAndReturn(run func(context.Context, string) (*v1.Component, error)) *mockComponentRepo_get_Call {
	_c.Call.Return(run)
	return _c
}

// updateCondition provides a mock function with given fields: ctx, component, status, version
func (_m *mockComponentRepo) updateCondition(ctx context.Context, component *v1.Component, status v1.HealthStatus, version string) error {
	ret := _m.Called(ctx, component, status, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Component, v1.HealthStatus, string) error); ok {
		r0 = rf(ctx, component, status, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockComponentRepo_updateCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateCondition'
type mockComponentRepo_updateCondition_Call struct {
	*mock.Call
}

// updateCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - component *v1.Component
//   - status v1.HealthStatus
//   - version string
func (_e *mockComponentRepo_Expecter) updateCondition(ctx interface{}, component interface{}, status interface{}, version interface{}) *mockComponentRepo_updateCondition_Call {
	return &mockComponentRepo_updateCondition_Call{Call: _e.mock.On("updateCondition", ctx, component, status, version)}
}

func (_c *mockComponentRepo_updateCondition_Call) Run(run func(ctx context.Context, component *v1.Component, status v1.HealthStatus, version string)) *mockComponentRepo_updateCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Component), args[2].(v1.HealthStatus), args[3].(string))
	})
	return _c
}

func (_c *mockComponentRepo_updateCondition_Call) Return(_a0 error) *mockComponentRepo_updateCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockComponentRepo_updateCondition_Call) RunAndReturn(run func(context.Context, *v1.Component, v1.HealthStatus, string) error) *mockComponentRepo_updateCondition_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockComponentRepo interface {
	mock.TestingT
	Cleanup(func())
}

// newMockComponentRepo creates a new instance of mockComponentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockComponentRepo(t mockConstructorTestingTnewMockComponentRepo) *mockComponentRepo {
	mock := &mockComponentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
