// Code generated by mockery v2.20.0. DO NOT EDIT.

package health

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockComponentManager is an autogenerated mock type for the componentManager type
type mockComponentManager struct {
	mock.Mock
}

type mockComponentManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockComponentManager) EXPECT() *mockComponentManager_Expecter {
	return &mockComponentManager_Expecter{mock: &_m.Mock}
}

// UpdateComponentHealth provides a mock function with given fields: ctx, componentName, namespace
func (_m *mockComponentManager) UpdateComponentHealth(ctx context.Context, componentName string, namespace string) error {
	ret := _m.Called(ctx, componentName, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, componentName, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockComponentManager_UpdateComponentHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponentHealth'
type mockComponentManager_UpdateComponentHealth_Call struct {
	*mock.Call
}

// UpdateComponentHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - componentName string
//   - namespace string
func (_e *mockComponentManager_Expecter) UpdateComponentHealth(ctx interface{}, componentName interface{}, namespace interface{}) *mockComponentManager_UpdateComponentHealth_Call {
	return &mockComponentManager_UpdateComponentHealth_Call{Call: _e.mock.On("UpdateComponentHealth", ctx, componentName, namespace)}
}

func (_c *mockComponentManager_UpdateComponentHealth_Call) Run(run func(ctx context.Context, componentName string, namespace string)) *mockComponentManager_UpdateComponentHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockComponentManager_UpdateComponentHealth_Call) Return(_a0 error) *mockComponentManager_UpdateComponentHealth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockComponentManager_UpdateComponentHealth_Call) RunAndReturn(run func(context.Context, string, string) error) *mockComponentManager_UpdateComponentHealth_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockComponentManager interface {
	mock.TestingT
	Cleanup(func())
}

// newMockComponentManager creates a new instance of mockComponentManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockComponentManager(t mockConstructorTestingTnewMockComponentManager) *mockComponentManager {
	mock := &mockComponentManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
