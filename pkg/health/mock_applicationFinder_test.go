// Code generated by mockery v2.42.1. DO NOT EDIT.

package health

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/apps/v1"
)

// mockApplicationFinder is an autogenerated mock type for the applicationFinder type
type mockApplicationFinder struct {
	mock.Mock
}

type mockApplicationFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *mockApplicationFinder) EXPECT() *mockApplicationFinder_Expecter {
	return &mockApplicationFinder_Expecter{mock: &_m.Mock}
}

// findComponentApplications provides a mock function with given fields: ctx, componentName, namespace
func (_m *mockApplicationFinder) findComponentApplications(ctx context.Context, componentName string, namespace string) (*v1.DeploymentList, *v1.StatefulSetList, *v1.DaemonSetList, error) {
	ret := _m.Called(ctx, componentName, namespace)

	if len(ret) == 0 {
		panic("no return value specified for findComponentApplications")
	}

	var r0 *v1.DeploymentList
	var r1 *v1.StatefulSetList
	var r2 *v1.DaemonSetList
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.DeploymentList, *v1.StatefulSetList, *v1.DaemonSetList, error)); ok {
		return rf(ctx, componentName, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.DeploymentList); ok {
		r0 = rf(ctx, componentName, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeploymentList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *v1.StatefulSetList); ok {
		r1 = rf(ctx, componentName, namespace)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*v1.StatefulSetList)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) *v1.DaemonSetList); ok {
		r2 = rf(ctx, componentName, namespace)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*v1.DaemonSetList)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string) error); ok {
		r3 = rf(ctx, componentName, namespace)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// mockApplicationFinder_findComponentApplications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'findComponentApplications'
type mockApplicationFinder_findComponentApplications_Call struct {
	*mock.Call
}

// findComponentApplications is a helper method to define mock.On call
//   - ctx context.Context
//   - componentName string
//   - namespace string
func (_e *mockApplicationFinder_Expecter) findComponentApplications(ctx interface{}, componentName interface{}, namespace interface{}) *mockApplicationFinder_findComponentApplications_Call {
	return &mockApplicationFinder_findComponentApplications_Call{Call: _e.mock.On("findComponentApplications", ctx, componentName, namespace)}
}

func (_c *mockApplicationFinder_findComponentApplications_Call) Run(run func(ctx context.Context, componentName string, namespace string)) *mockApplicationFinder_findComponentApplications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockApplicationFinder_findComponentApplications_Call) Return(_a0 *v1.DeploymentList, _a1 *v1.StatefulSetList, _a2 *v1.DaemonSetList, _a3 error) *mockApplicationFinder_findComponentApplications_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *mockApplicationFinder_findComponentApplications_Call) RunAndReturn(run func(context.Context, string, string) (*v1.DeploymentList, *v1.StatefulSetList, *v1.DaemonSetList, error)) *mockApplicationFinder_findComponentApplications_Call {
	_c.Call.Return(run)
	return _c
}

// newMockApplicationFinder creates a new instance of mockApplicationFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockApplicationFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockApplicationFinder {
	mock := &mockApplicationFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
