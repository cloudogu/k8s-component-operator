// Code generated by mockery v2.42.1. DO NOT EDIT.

package health

import (
	ecosystem "github.com/cloudogu/k8s-component-operator/pkg/api/ecosystem"
	mock "github.com/stretchr/testify/mock"
)

// mockComponentV1Alpha1Client is an autogenerated mock type for the componentV1Alpha1Client type
type mockComponentV1Alpha1Client struct {
	mock.Mock
}

type mockComponentV1Alpha1Client_Expecter struct {
	mock *mock.Mock
}

func (_m *mockComponentV1Alpha1Client) EXPECT() *mockComponentV1Alpha1Client_Expecter {
	return &mockComponentV1Alpha1Client_Expecter{mock: &_m.Mock}
}

// Components provides a mock function with given fields: namespace
func (_m *mockComponentV1Alpha1Client) Components(namespace string) ecosystem.ComponentInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Components")
	}

	var r0 ecosystem.ComponentInterface
	if rf, ok := ret.Get(0).(func(string) ecosystem.ComponentInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ecosystem.ComponentInterface)
		}
	}

	return r0
}

// mockComponentV1Alpha1Client_Components_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Components'
type mockComponentV1Alpha1Client_Components_Call struct {
	*mock.Call
}

// Components is a helper method to define mock.On call
//   - namespace string
func (_e *mockComponentV1Alpha1Client_Expecter) Components(namespace interface{}) *mockComponentV1Alpha1Client_Components_Call {
	return &mockComponentV1Alpha1Client_Components_Call{Call: _e.mock.On("Components", namespace)}
}

func (_c *mockComponentV1Alpha1Client_Components_Call) Run(run func(namespace string)) *mockComponentV1Alpha1Client_Components_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockComponentV1Alpha1Client_Components_Call) Return(_a0 ecosystem.ComponentInterface) *mockComponentV1Alpha1Client_Components_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockComponentV1Alpha1Client_Components_Call) RunAndReturn(run func(string) ecosystem.ComponentInterface) *mockComponentV1Alpha1Client_Components_Call {
	_c.Call.Return(run)
	return _c
}

// newMockComponentV1Alpha1Client creates a new instance of mockComponentV1Alpha1Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockComponentV1Alpha1Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockComponentV1Alpha1Client {
	mock := &mockComponentV1Alpha1Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
