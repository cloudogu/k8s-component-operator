// Code generated by mockery v2.53.3. DO NOT EDIT.

package labels

import mock "github.com/stretchr/testify/mock"

// mockObjectWithLabels is an autogenerated mock type for the objectWithLabels type
type mockObjectWithLabels struct {
	mock.Mock
}

type mockObjectWithLabels_Expecter struct {
	mock *mock.Mock
}

func (_m *mockObjectWithLabels) EXPECT() *mockObjectWithLabels_Expecter {
	return &mockObjectWithLabels_Expecter{mock: &_m.Mock}
}

// GetLabels provides a mock function with no fields
func (_m *mockObjectWithLabels) GetLabels() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabels")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// mockObjectWithLabels_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type mockObjectWithLabels_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
func (_e *mockObjectWithLabels_Expecter) GetLabels() *mockObjectWithLabels_GetLabels_Call {
	return &mockObjectWithLabels_GetLabels_Call{Call: _e.mock.On("GetLabels")}
}

func (_c *mockObjectWithLabels_GetLabels_Call) Run(run func()) *mockObjectWithLabels_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockObjectWithLabels_GetLabels_Call) Return(_a0 map[string]string) *mockObjectWithLabels_GetLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockObjectWithLabels_GetLabels_Call) RunAndReturn(run func() map[string]string) *mockObjectWithLabels_GetLabels_Call {
	_c.Call.Return(run)
	return _c
}

// SetLabels provides a mock function with given fields: labels
func (_m *mockObjectWithLabels) SetLabels(labels map[string]string) {
	_m.Called(labels)
}

// mockObjectWithLabels_SetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLabels'
type mockObjectWithLabels_SetLabels_Call struct {
	*mock.Call
}

// SetLabels is a helper method to define mock.On call
//   - labels map[string]string
func (_e *mockObjectWithLabels_Expecter) SetLabels(labels interface{}) *mockObjectWithLabels_SetLabels_Call {
	return &mockObjectWithLabels_SetLabels_Call{Call: _e.mock.On("SetLabels", labels)}
}

func (_c *mockObjectWithLabels_SetLabels_Call) Run(run func(labels map[string]string)) *mockObjectWithLabels_SetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *mockObjectWithLabels_SetLabels_Call) Return() *mockObjectWithLabels_SetLabels_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockObjectWithLabels_SetLabels_Call) RunAndReturn(run func(map[string]string)) *mockObjectWithLabels_SetLabels_Call {
	_c.Run(run)
	return _c
}

// newMockObjectWithLabels creates a new instance of mockObjectWithLabels. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockObjectWithLabels(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockObjectWithLabels {
	mock := &mockObjectWithLabels{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
