// Code generated by mockery v2.42.1. DO NOT EDIT.

package labels

import mock "github.com/stretchr/testify/mock"

// mockUnstructuredConverter is an autogenerated mock type for the unstructuredConverter type
type mockUnstructuredConverter struct {
	mock.Mock
}

type mockUnstructuredConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockUnstructuredConverter) EXPECT() *mockUnstructuredConverter_Expecter {
	return &mockUnstructuredConverter_Expecter{mock: &_m.Mock}
}

// FromUnstructured provides a mock function with given fields: u, obj
func (_m *mockUnstructuredConverter) FromUnstructured(u map[string]interface{}, obj interface{}) error {
	ret := _m.Called(u, obj)

	if len(ret) == 0 {
		panic("no return value specified for FromUnstructured")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, interface{}) error); ok {
		r0 = rf(u, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockUnstructuredConverter_FromUnstructured_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromUnstructured'
type mockUnstructuredConverter_FromUnstructured_Call struct {
	*mock.Call
}

// FromUnstructured is a helper method to define mock.On call
//   - u map[string]interface{}
//   - obj interface{}
func (_e *mockUnstructuredConverter_Expecter) FromUnstructured(u interface{}, obj interface{}) *mockUnstructuredConverter_FromUnstructured_Call {
	return &mockUnstructuredConverter_FromUnstructured_Call{Call: _e.mock.On("FromUnstructured", u, obj)}
}

func (_c *mockUnstructuredConverter_FromUnstructured_Call) Run(run func(u map[string]interface{}, obj interface{})) *mockUnstructuredConverter_FromUnstructured_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *mockUnstructuredConverter_FromUnstructured_Call) Return(_a0 error) *mockUnstructuredConverter_FromUnstructured_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockUnstructuredConverter_FromUnstructured_Call) RunAndReturn(run func(map[string]interface{}, interface{}) error) *mockUnstructuredConverter_FromUnstructured_Call {
	_c.Call.Return(run)
	return _c
}

// ToUnstructured provides a mock function with given fields: obj
func (_m *mockUnstructuredConverter) ToUnstructured(obj interface{}) (map[string]interface{}, error) {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for ToUnstructured")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (map[string]interface{}, error)); ok {
		return rf(obj)
	}
	if rf, ok := ret.Get(0).(func(interface{}) map[string]interface{}); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockUnstructuredConverter_ToUnstructured_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToUnstructured'
type mockUnstructuredConverter_ToUnstructured_Call struct {
	*mock.Call
}

// ToUnstructured is a helper method to define mock.On call
//   - obj interface{}
func (_e *mockUnstructuredConverter_Expecter) ToUnstructured(obj interface{}) *mockUnstructuredConverter_ToUnstructured_Call {
	return &mockUnstructuredConverter_ToUnstructured_Call{Call: _e.mock.On("ToUnstructured", obj)}
}

func (_c *mockUnstructuredConverter_ToUnstructured_Call) Run(run func(obj interface{})) *mockUnstructuredConverter_ToUnstructured_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *mockUnstructuredConverter_ToUnstructured_Call) Return(_a0 map[string]interface{}, _a1 error) *mockUnstructuredConverter_ToUnstructured_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockUnstructuredConverter_ToUnstructured_Call) RunAndReturn(run func(interface{}) (map[string]interface{}, error)) *mockUnstructuredConverter_ToUnstructured_Call {
	_c.Call.Return(run)
	return _c
}

// newMockUnstructuredConverter creates a new instance of mockUnstructuredConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockUnstructuredConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockUnstructuredConverter {
	mock := &mockUnstructuredConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
