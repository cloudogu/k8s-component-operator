// Code generated by mockery v2.20.0. DO NOT EDIT.

package labels

import (
	mock "github.com/stretchr/testify/mock"
	yaml "sigs.k8s.io/yaml"
)

// mockGenericYamlSerializer is an autogenerated mock type for the genericYamlSerializer type
type mockGenericYamlSerializer struct {
	mock.Mock
}

type mockGenericYamlSerializer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGenericYamlSerializer) EXPECT() *mockGenericYamlSerializer_Expecter {
	return &mockGenericYamlSerializer_Expecter{mock: &_m.Mock}
}

// Marshal provides a mock function with given fields: o
func (_m *mockGenericYamlSerializer) Marshal(o interface{}) ([]byte, error) {
	ret := _m.Called(o)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]byte, error)); ok {
		return rf(o)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGenericYamlSerializer_Marshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Marshal'
type mockGenericYamlSerializer_Marshal_Call struct {
	*mock.Call
}

// Marshal is a helper method to define mock.On call
//   - o interface{}
func (_e *mockGenericYamlSerializer_Expecter) Marshal(o interface{}) *mockGenericYamlSerializer_Marshal_Call {
	return &mockGenericYamlSerializer_Marshal_Call{Call: _e.mock.On("Marshal", o)}
}

func (_c *mockGenericYamlSerializer_Marshal_Call) Run(run func(o interface{})) *mockGenericYamlSerializer_Marshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *mockGenericYamlSerializer_Marshal_Call) Return(_a0 []byte, _a1 error) *mockGenericYamlSerializer_Marshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGenericYamlSerializer_Marshal_Call) RunAndReturn(run func(interface{}) ([]byte, error)) *mockGenericYamlSerializer_Marshal_Call {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function with given fields: y, o, opts
func (_m *mockGenericYamlSerializer) Unmarshal(y []byte, o interface{}, opts ...yaml.JSONOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, y, o)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}, ...yaml.JSONOpt) error); ok {
		r0 = rf(y, o, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockGenericYamlSerializer_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type mockGenericYamlSerializer_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - y []byte
//   - o interface{}
//   - opts ...yaml.JSONOpt
func (_e *mockGenericYamlSerializer_Expecter) Unmarshal(y interface{}, o interface{}, opts ...interface{}) *mockGenericYamlSerializer_Unmarshal_Call {
	return &mockGenericYamlSerializer_Unmarshal_Call{Call: _e.mock.On("Unmarshal",
		append([]interface{}{y, o}, opts...)...)}
}

func (_c *mockGenericYamlSerializer_Unmarshal_Call) Run(run func(y []byte, o interface{}, opts ...yaml.JSONOpt)) *mockGenericYamlSerializer_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]yaml.JSONOpt, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(yaml.JSONOpt)
			}
		}
		run(args[0].([]byte), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *mockGenericYamlSerializer_Unmarshal_Call) Return(_a0 error) *mockGenericYamlSerializer_Unmarshal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGenericYamlSerializer_Unmarshal_Call) RunAndReturn(run func([]byte, interface{}, ...yaml.JSONOpt) error) *mockGenericYamlSerializer_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockGenericYamlSerializer interface {
	mock.TestingT
	Cleanup(func())
}

// newMockGenericYamlSerializer creates a new instance of mockGenericYamlSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockGenericYamlSerializer(t mockConstructorTestingTnewMockGenericYamlSerializer) *mockGenericYamlSerializer {
	mock := &mockGenericYamlSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
