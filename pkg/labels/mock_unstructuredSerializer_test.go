// Code generated by mockery v2.20.0. DO NOT EDIT.

package labels

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
	runtime "k8s.io/apimachinery/pkg/runtime"

	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// mockUnstructuredSerializer is an autogenerated mock type for the unstructuredSerializer type
type mockUnstructuredSerializer struct {
	mock.Mock
}

type mockUnstructuredSerializer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockUnstructuredSerializer) EXPECT() *mockUnstructuredSerializer_Expecter {
	return &mockUnstructuredSerializer_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: data, defaults, into
func (_m *mockUnstructuredSerializer) Decode(data []byte, defaults *schema.GroupVersionKind, into runtime.Object) (runtime.Object, *schema.GroupVersionKind, error) {
	ret := _m.Called(data, defaults, into)

	var r0 runtime.Object
	var r1 *schema.GroupVersionKind
	var r2 error
	if rf, ok := ret.Get(0).(func([]byte, *schema.GroupVersionKind, runtime.Object) (runtime.Object, *schema.GroupVersionKind, error)); ok {
		return rf(data, defaults, into)
	}
	if rf, ok := ret.Get(0).(func([]byte, *schema.GroupVersionKind, runtime.Object) runtime.Object); ok {
		r0 = rf(data, defaults, into)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Object)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, *schema.GroupVersionKind, runtime.Object) *schema.GroupVersionKind); ok {
		r1 = rf(data, defaults, into)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*schema.GroupVersionKind)
		}
	}

	if rf, ok := ret.Get(2).(func([]byte, *schema.GroupVersionKind, runtime.Object) error); ok {
		r2 = rf(data, defaults, into)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockUnstructuredSerializer_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type mockUnstructuredSerializer_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - data []byte
//   - defaults *schema.GroupVersionKind
//   - into runtime.Object
func (_e *mockUnstructuredSerializer_Expecter) Decode(data interface{}, defaults interface{}, into interface{}) *mockUnstructuredSerializer_Decode_Call {
	return &mockUnstructuredSerializer_Decode_Call{Call: _e.mock.On("Decode", data, defaults, into)}
}

func (_c *mockUnstructuredSerializer_Decode_Call) Run(run func(data []byte, defaults *schema.GroupVersionKind, into runtime.Object)) *mockUnstructuredSerializer_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(*schema.GroupVersionKind), args[2].(runtime.Object))
	})
	return _c
}

func (_c *mockUnstructuredSerializer_Decode_Call) Return(_a0 runtime.Object, _a1 *schema.GroupVersionKind, _a2 error) *mockUnstructuredSerializer_Decode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockUnstructuredSerializer_Decode_Call) RunAndReturn(run func([]byte, *schema.GroupVersionKind, runtime.Object) (runtime.Object, *schema.GroupVersionKind, error)) *mockUnstructuredSerializer_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: obj, w
func (_m *mockUnstructuredSerializer) Encode(obj runtime.Object, w io.Writer) error {
	ret := _m.Called(obj, w)

	var r0 error
	if rf, ok := ret.Get(0).(func(runtime.Object, io.Writer) error); ok {
		r0 = rf(obj, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockUnstructuredSerializer_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type mockUnstructuredSerializer_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - obj runtime.Object
//   - w io.Writer
func (_e *mockUnstructuredSerializer_Expecter) Encode(obj interface{}, w interface{}) *mockUnstructuredSerializer_Encode_Call {
	return &mockUnstructuredSerializer_Encode_Call{Call: _e.mock.On("Encode", obj, w)}
}

func (_c *mockUnstructuredSerializer_Encode_Call) Run(run func(obj runtime.Object, w io.Writer)) *mockUnstructuredSerializer_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.Object), args[1].(io.Writer))
	})
	return _c
}

func (_c *mockUnstructuredSerializer_Encode_Call) Return(_a0 error) *mockUnstructuredSerializer_Encode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockUnstructuredSerializer_Encode_Call) RunAndReturn(run func(runtime.Object, io.Writer) error) *mockUnstructuredSerializer_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// Identifier provides a mock function with given fields:
func (_m *mockUnstructuredSerializer) Identifier() runtime.Identifier {
	ret := _m.Called()

	var r0 runtime.Identifier
	if rf, ok := ret.Get(0).(func() runtime.Identifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(runtime.Identifier)
	}

	return r0
}

// mockUnstructuredSerializer_Identifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identifier'
type mockUnstructuredSerializer_Identifier_Call struct {
	*mock.Call
}

// Identifier is a helper method to define mock.On call
func (_e *mockUnstructuredSerializer_Expecter) Identifier() *mockUnstructuredSerializer_Identifier_Call {
	return &mockUnstructuredSerializer_Identifier_Call{Call: _e.mock.On("Identifier")}
}

func (_c *mockUnstructuredSerializer_Identifier_Call) Run(run func()) *mockUnstructuredSerializer_Identifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockUnstructuredSerializer_Identifier_Call) Return(_a0 runtime.Identifier) *mockUnstructuredSerializer_Identifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockUnstructuredSerializer_Identifier_Call) RunAndReturn(run func() runtime.Identifier) *mockUnstructuredSerializer_Identifier_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockUnstructuredSerializer interface {
	mock.TestingT
	Cleanup(func())
}

// newMockUnstructuredSerializer creates a new instance of mockUnstructuredSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockUnstructuredSerializer(t mockConstructorTestingTnewMockUnstructuredSerializer) *mockUnstructuredSerializer {
	mock := &mockUnstructuredSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
